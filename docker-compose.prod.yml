version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: ironlog_postgres
    environment:
      POSTGRES_DB: ironlog
      POSTGRES_USER: ironlog
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-ironlog_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./apps/server/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - '5432:5432'
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ironlog -d ironlog']
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Session Storage (optional)
  redis:
    image: redis:7-alpine
    container_name: ironlog_redis
    ports:
      - '6379:6379'
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

  # Backend API Server
  server:
    build:
      context: .
      dockerfile: Dockerfile.server
    container_name: ironlog_server
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://ironlog:${DATABASE_PASSWORD:-ironlog_password}@postgres:5432/ironlog
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      PORT: 3001
    ports:
      - '3001:3001'
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./apps/server/logs:/app/logs
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3001/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Next.js Application
  web:
    build:
      context: .
      dockerfile: Dockerfile.web
    container_name: ironlog_web
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3001/api/v1}
    ports:
      - '3000:3000'
    depends_on:
      server:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/api/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: ironlog_nginx
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
    depends_on:
      - web
      - server
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: ironlog_network
